<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1640"
   version = "1.7">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES"
      buildArchitectures = "Automatic">
      <PreActions>
         <ExecutionAction
            ActionType = "Xcode.IDEStandardExecutionActionsCore.ExecutionActionType.ShellScriptAction">
            <ActionContent
               title = "Setup SigningServer Environment"
               scriptText = "#!/bin/bash&#10;set -e&#10;&#10;# Complete setup for SigningServer including libraries, Swift files, and resources&#10;cd &quot;${PROJECT_DIR}&quot;&#10;&#10;echo &quot;SigningServer Complete Setup&quot;&#10;echo &quot;============================&quot;&#10;&#10;# Read configuration from Base.xcconfig&#10;XCCONFIG_FILE=&quot;${PROJECT_DIR}/../Configurations/Base.xcconfig&quot;&#10;if [ -f &quot;$XCCONFIG_FILE&quot; ]; then&#10;    # Extract values from xcconfig&#10;    GITHUB_ORG=$(grep &quot;^GITHUB_ORG&quot; &quot;$XCCONFIG_FILE&quot; | cut -d&apos;=&apos; -f2 | xargs)&#10;    C2PA_VERSION=$(grep &quot;^C2PA_VERSION&quot; &quot;$XCCONFIG_FILE&quot; | cut -d&apos;=&apos; -f2 | xargs)&#10;else&#10;    # Fallback to defaults if xcconfig doesn&apos;t exist&#10;    echo &quot;Warning: Base.xcconfig not found, using defaults&quot;&#10;    GITHUB_ORG=&quot;contentauth&quot;&#10;    C2PA_VERSION=&quot;v0.58.0&quot;&#10;fi&#10;LIBS_DIR=&quot;${PROJECT_DIR}/libs&quot;&#10;TEMP_DIR=&quot;${PROJECT_DIR}/.build/temp&quot;&#10;LIBRARY_DIR=&quot;${PROJECT_DIR}/../Library&quot;&#10;TEST_SHARED_DIR=&quot;${PROJECT_DIR}/../TestShared&quot;&#10;&#10;echo &quot;Version: $C2PA_VERSION&quot;&#10;echo &quot;GitHub Org: $GITHUB_ORG&quot;&#10;&#10;# Step 1: Download C2PA Libraries if needed&#10;echo &quot;Step 1: Checking C2PA libraries...&quot;&#10;NEED_DOWNLOAD=true&#10;if [ -f &quot;${LIBS_DIR}/libc2pa_c.dylib&quot; ]; then&#10;    LIB_SIZE=$(stat -f%z &quot;${LIBS_DIR}/libc2pa_c.dylib&quot; 2&gt;/dev/null || echo 0)&#10;    if [ &quot;$LIB_SIZE&quot; -gt 1000000 ]; then&#10;        echo &quot;  &#x2713; libc2pa_c.dylib already exists ($(($LIB_SIZE / 1024 / 1024)) MB)&quot;&#10;        NEED_DOWNLOAD=false&#10;    fi&#10;fi&#10;&#10;if [ &quot;$NEED_DOWNLOAD&quot; = &quot;true&quot; ]; then&#10;    echo &quot;  &#x2022; Downloading macOS C2PA libraries...&quot;&#10;    &#10;    # Create directories&#10;    mkdir -p &quot;$LIBS_DIR&quot;&#10;    mkdir -p &quot;$TEMP_DIR&quot;&#10;    &#10;    # Determine architecture&#10;    ARCH=$(uname -m)&#10;    if [ &quot;$ARCH&quot; = &quot;arm64&quot; ]; then&#10;        RELEASE_SUFFIX=&quot;aarch64-apple-darwin&quot;&#10;        echo &quot;  &#x2022; Detected Apple Silicon (arm64)&quot;&#10;    else&#10;        RELEASE_SUFFIX=&quot;x86_64-apple-darwin&quot;&#10;        echo &quot;  &#x2022; Detected Intel (x86_64)&quot;&#10;    fi&#10;    &#10;    # Download universal library for better compatibility&#10;    echo &quot;  &#x2022; Downloading universal macOS library...&quot;&#10;    curl -sL &quot;https://github.com/${GITHUB_ORG}/c2pa-rs/releases/download/c2pa-${C2PA_VERSION}/c2pa-${C2PA_VERSION}-universal-apple-darwin.zip&quot; \&#10;        -o &quot;${TEMP_DIR}/macos-universal.zip&quot;&#10;    &#10;    # Extract&#10;    echo &quot;  &#x2022; Extracting library...&quot;&#10;    unzip -q -o &quot;${TEMP_DIR}/macos-universal.zip&quot; -d &quot;${TEMP_DIR}/macos-universal&quot;&#10;    &#10;    # Copy libraries&#10;    echo &quot;  &#x2022; Installing libraries...&quot;&#10;    cp &quot;${TEMP_DIR}/macos-universal/lib/libc2pa_c.dylib&quot; &quot;${LIBS_DIR}/&quot;&#10;    if [ -f &quot;${TEMP_DIR}/macos-universal/lib/libc2pa_c.a&quot; ]; then&#10;        cp &quot;${TEMP_DIR}/macos-universal/lib/libc2pa_c.a&quot; &quot;${LIBS_DIR}/&quot;&#10;    fi&#10;fi&#10;&#10;# Step 2: Setup C2PAC module with headers&#10;echo &quot;Step 2: Setting up C2PAC module...&quot;&#10;mkdir -p &quot;${PROJECT_DIR}/Sources/C2PAC/include&quot;&#10;&#10;if [ ! -f &quot;${PROJECT_DIR}/Sources/C2PAC/include/c2pa.h&quot; ] || [ &quot;$NEED_DOWNLOAD&quot; = &quot;true&quot; ]; then&#10;    # Get header from download or existing temp&#10;    if [ -f &quot;${TEMP_DIR}/macos-universal/include/c2pa.h&quot; ]; then&#10;        cp &quot;${TEMP_DIR}/macos-universal/include/c2pa.h&quot; &quot;${PROJECT_DIR}/Sources/C2PAC/include/c2pa.h.orig&quot;&#10;    elif [ ! -f &quot;${PROJECT_DIR}/Sources/C2PAC/include/c2pa.h.orig&quot; ]; then&#10;        # Re-download just for header if needed&#10;        mkdir -p &quot;${TEMP_DIR}&quot;&#10;        curl -sL &quot;https://github.com/${GITHUB_ORG}/c2pa-rs/releases/download/c2pa-${C2PA_VERSION}/c2pa-${C2PA_VERSION}-universal-apple-darwin.zip&quot; \&#10;            -o &quot;${TEMP_DIR}/macos-universal.zip&quot;&#10;        unzip -q -o &quot;${TEMP_DIR}/macos-universal.zip&quot; -d &quot;${TEMP_DIR}/macos-universal&quot;&#10;        cp &quot;${TEMP_DIR}/macos-universal/include/c2pa.h&quot; &quot;${PROJECT_DIR}/Sources/C2PAC/include/c2pa.h.orig&quot;&#10;    fi&#10;    &#10;    # Patch the header file for Swift compatibility&#10;    echo &quot;  &#x2022; Patching c2pa.h header...&quot;&#10;    sed &apos;s/typedef struct C2paSigner C2paSigner;/typedef struct C2paSigner { } C2paSigner;/g&apos; \&#10;        &quot;${PROJECT_DIR}/Sources/C2PAC/include/c2pa.h.orig&quot; &gt; &quot;${PROJECT_DIR}/Sources/C2PAC/include/c2pa.h&quot;&#10;    rm -f &quot;${PROJECT_DIR}/Sources/C2PAC/include/c2pa.h.orig&quot;&#10;fi&#10;&#10;# Create module map&#10;if [ ! -f &quot;${PROJECT_DIR}/Sources/C2PAC/module.modulemap&quot; ]; then&#10;    echo &quot;  &#x2022; Creating module map...&quot;&#10;    cat &gt; &quot;${PROJECT_DIR}/Sources/C2PAC/module.modulemap&quot; &lt;&lt; &apos;EOF&apos;&#10;module C2PAC {&#10;    header &quot;include/c2pa.h&quot;&#10;    export *&#10;}&#10;EOF&#10;fi&#10;&#10;# Step 3: Copy Swift wrapper files from Library&#10;echo &quot;Step 3: Copying Swift wrapper files...&quot;&#10;mkdir -p &quot;${PROJECT_DIR}/Sources/C2PA&quot;&#10;&#10;# Copy all necessary C2PA Swift files&#10;for file in C2PA.swift Helpers.swift Stream.swift Builder.swift Signer.swift SigningAlgorithm.swift CertificateManager.swift; do&#10;    if [ -f &quot;${LIBRARY_DIR}/Sources/${file}&quot; ]; then&#10;        cp &quot;${LIBRARY_DIR}/Sources/${file}&quot; &quot;${PROJECT_DIR}/Sources/C2PA/&quot;&#10;        echo &quot;  &#x2713; Copied ${file}&quot;&#10;    else&#10;        echo &quot;  &#x26a0;&#xfe0f; Warning: ${file} not found in Library/Sources&quot;&#10;    fi&#10;done&#10;&#10;# Step 4: Copy test certificates from TestShared&#10;echo &quot;Step 4: Copying test certificates...&quot;&#10;mkdir -p &quot;${PROJECT_DIR}/Resources&quot;&#10;&#10;if [ -f &quot;${TEST_SHARED_DIR}/Sources/Resources/es256_certs.pem&quot; ]; then&#10;    cp &quot;${TEST_SHARED_DIR}/Sources/Resources/es256_certs.pem&quot; &quot;${PROJECT_DIR}/Resources/&quot;&#10;    echo &quot;  &#x2713; Copied es256_certs.pem&quot;&#10;fi&#10;&#10;if [ -f &quot;${TEST_SHARED_DIR}/Sources/Resources/es256_private.key&quot; ]; then&#10;    cp &quot;${TEST_SHARED_DIR}/Sources/Resources/es256_private.key&quot; &quot;${PROJECT_DIR}/Resources/&quot;&#10;    echo &quot;  &#x2713; Copied es256_private.key&quot;&#10;fi&#10;&#10;# Step 5: Create symlink for build directory&#10;echo &quot;Step 5: Creating build symlinks...&quot;&#10;mkdir -p .build/arm64-apple-macosx/debug&#10;ln -sf &quot;${PROJECT_DIR}/libs/libc2pa_c.dylib&quot; .build/arm64-apple-macosx/debug/libc2pa_c.dylib&#10;&#10;# Clean up temp files&#10;if [ -d &quot;${TEMP_DIR}&quot; ]; then&#10;    echo &quot;  &#x2022; Cleaning up temp files...&quot;&#10;    rm -rf &quot;${TEMP_DIR}&quot;&#10;fi&#10;&#10;# Resolve package dependencies&#10;echo &quot;Step 6: Resolving package dependencies...&quot;&#10;swift package resolve&#10;&#10;echo &quot;&#x2713; SigningServer setup completed successfully!&quot;&#10;"
               shellToInvoke = "/bin/bash">
               <EnvironmentBuildable>
                  <BuildableReference
                     BuildableIdentifier = "primary"
                     BlueprintIdentifier = "9A1234621234567890ABCDEF"
                     BuildableName = "SigningServer"
                     BlueprintName = "SigningServer"
                     ReferencedContainer = "container:SigningServer.xcodeproj">
                  </BuildableReference>
               </EnvironmentBuildable>
            </ActionContent>
         </ExecutionAction>
      </PreActions>
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "9A1234621234567890ABCDEF"
               BuildableName = "SigningServer"
               BlueprintName = "SigningServer"
               ReferencedContainer = "container:SigningServer.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <Testables>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "YES"
      customWorkingDirectory = "$(PROJECT_DIR)"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "9A1234621234567890ABCDEF"
            BuildableName = "SigningServer"
            BlueprintName = "SigningServer"
            ReferencedContainer = "container:SigningServer.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
      <CommandLineArguments>
         <CommandLineArgument
            argument = "serve"
            isEnabled = "YES">
         </CommandLineArgument>
         <CommandLineArgument
            argument = "--hostname"
            isEnabled = "YES">
         </CommandLineArgument>
         <CommandLineArgument
            argument = "127.0.0.1"
            isEnabled = "YES">
         </CommandLineArgument>
         <CommandLineArgument
            argument = "--port"
            isEnabled = "YES">
         </CommandLineArgument>
         <CommandLineArgument
            argument = "8080"
            isEnabled = "YES">
         </CommandLineArgument>
      </CommandLineArguments>
      <EnvironmentVariables>
         <EnvironmentVariable
            key = "LOG_LEVEL"
            value = "debug"
            isEnabled = "YES">
         </EnvironmentVariable>
         <EnvironmentVariable
            key = "DYLD_LIBRARY_PATH"
            value = "libs:$(DYLD_LIBRARY_PATH)"
            isEnabled = "YES">
         </EnvironmentVariable>
         <EnvironmentVariable
            key = "SIGNING_SERVER_URL"
            value = "$(SIGNING_SERVER_URL)"
            isEnabled = "YES">
         </EnvironmentVariable>
         <EnvironmentVariable
            key = "SIGNING_SERVER_TOKEN"
            value = "$(SIGNING_SERVER_TOKEN)"
            isEnabled = "YES">
         </EnvironmentVariable>
      </EnvironmentVariables>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Release"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "9A1234621234567890ABCDEF"
            BuildableName = "SigningServer"
            BlueprintName = "SigningServer"
            ReferencedContainer = "container:SigningServer.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>
