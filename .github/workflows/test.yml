name: Tests

on:
  push:
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  SCHEME: C2PAExample

jobs:
  test:
    name: ${{ matrix.device }} Xcode ${{ matrix.xcode }}
    runs-on: macos-14
    strategy:
      fail-fast: false
      matrix:
        xcode: ["16.1"]
        device:
          [
            "iPhone 16 Pro",
            "iPhone 16",
            "iPhone SE (3rd generation)",
            "iPad Pro 11-inch (M4)",
          ]
        ios: ["18.1"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Xcode ${{ matrix.xcode }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode }}

      - name: Verify Xcode version
        run: xcodebuild -version

      - name: Build iOS Framework
        run: make ios-framework

      - name: Build & test
        run: |
          set -eo pipefail
          cd example
          xcrun xcodebuild test \
            -project C2PAExample.xcodeproj \
            -scheme "$SCHEME" \
            -sdk iphonesimulator \
            -destination "platform=iOS Simulator,name=${{ matrix.device }},OS=${{ matrix.ios }}" \
            -resultBundlePath TestResults \
            -enableCodeCoverage YES \
            | xcpretty --test --color

      - name: Generate test summary
        run: |
          cd example
          xcrun xcresulttool get test-results summary --path TestResults.xcresult || true
          xcrun xcresulttool get object --path TestResults.xcresult --format json > test-results.json || true
          xcrun xcresulttool get test-results tests --path TestResults.xcresult || true

      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: TestSummary-${{ matrix.xcode }}-${{ matrix.device }}
          path: example/test-results.json

      - name: Export coverage LCOV
        if: success()
        run: |
          cd example
          
          # Export coverage data from xcresult bundle
          xcrun xcresulttool export coverage \
            --path TestResults.xcresult \
            --output-path coverage-export
          
          # Find the exported Coverage.profdata
          PROFDATA_PATH=$(find coverage-export -name "Coverage.profdata" -type f | head -1)
          echo "Coverage.profdata path: $PROFDATA_PATH"
          
          # Find the binary - could be in the export or in the xcresult bundle
          BINARY_PATH=$(find TestResults.xcresult coverage-export -name "C2PAExample" -type f | grep -v "dSYM" | head -1)
          echo "Binary path: $BINARY_PATH"
          
          if [ -n "$PROFDATA_PATH" ] && [ -n "$BINARY_PATH" ]; then
            # Export to LCOV format
            xcrun llvm-cov export \
              -format=lcov \
              -instr-profile="$PROFDATA_PATH" \
              "$BINARY_PATH" \
              > ../coverage-${{ matrix.xcode }}-${{ matrix.device }}.lcov
            echo "LCOV coverage report generated successfully"
          else
            echo "ERROR: Could not generate LCOV report - missing profdata or binary"
            echo "PROFDATA_PATH: $PROFDATA_PATH"
            echo "BINARY_PATH: $BINARY_PATH"
            exit 1
          fi
          
          # Clean up temporary export directory
          rm -rf coverage-export

      - name: Upload coverage report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.xcode }}-${{ matrix.device }}
          path: coverage-${{ matrix.xcode }}-${{ matrix.device }}.lcov
