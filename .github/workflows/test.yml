name: Tests

on:
  push:
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  SCHEME: C2PAExample

jobs:
  test:
    name: ${{ matrix.device }} Xcode ${{ matrix.xcode }}
    runs-on: macos-14
    strategy:
      fail-fast: false
      matrix:
        xcode: ["16.1"]
        device:
          [
            "iPhone 16 Pro",
            "iPhone 16",
            "iPhone SE (3rd generation)",
            "iPad Pro 11-inch (M4)",
          ]
        ios: ["18.1"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Xcode ${{ matrix.xcode }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode }}

      - name: Verify Xcode version
        run: xcodebuild -version

      - name: Build iOS Framework
        run: make ios-framework

      - name: Build & test
        run: |
          set -eo pipefail
          cd example
          xcrun xcodebuild test \
            -project C2PAExample.xcodeproj \
            -scheme "$SCHEME" \
            -sdk iphonesimulator \
            -destination "platform=iOS Simulator,name=${{ matrix.device }},OS=${{ matrix.ios }}" \
            -resultBundlePath TestResults \
            -enableCodeCoverage YES \
            | xcpretty --test --color

      - name: Generate test summary
        run: |
          cd example
          xcrun xcresulttool get test-results summary --path TestResults.xcresult || true
          xcrun xcresulttool get object --path TestResults.xcresult --format json > test-results.json || true
          xcrun xcresulttool get test-results tests --path TestResults.xcresult || true

      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: TestSummary-${{ matrix.xcode }}-${{ matrix.device }}
          path: example/test-results.json

      - name: Export coverage LCOV
        if: success()
        run: |
          cd example

          # Get DerivedData path from xcodebuild
          DERIVED_DATA=$(xcodebuild -showBuildSettings -project C2PAExample.xcodeproj -scheme C2PAExample -sdk iphonesimulator | grep -m 1 " BUILD_DIR " | sed 's/.*= //' | sed 's|/Build/Products||')
          echo "Derived data path: $DERIVED_DATA"

          # Find Coverage.profdata
          PROFDATA_PATH=""
          if [ -n "$DERIVED_DATA" ]; then
            PROFDATA_PATH=$(find "$DERIVED_DATA/Build/ProfileData" -name "Coverage.profdata" -type f 2>/dev/null | head -1 || true)
          fi

          # Method 2: If not found, look in common CI locations
          if [ -z "$PROFDATA_PATH" ]; then
            PROFDATA_PATH=$(find ~/Library/Developer/Xcode/DerivedData -path "*/Build/ProfileData/*/Coverage.profdata" -type f 2>/dev/null | grep -i c2paexample | head -1 || true)
          fi

          echo "Coverage.profdata path: $PROFDATA_PATH"

          # Find the test binary
          TEST_BINARY_PATH=""
          if [ -n "$DERIVED_DATA" ]; then
            TEST_BINARY_PATH=$(find "$DERIVED_DATA/Build/Products" -path "*/C2PAExampleTests.xctest/C2PAExampleTests" -type f 2>/dev/null | head -1 || true)
          fi

          # If not found, search more broadly
          if [ -z "$TEST_BINARY_PATH" ]; then
            TEST_BINARY_PATH=$(find ~/Library/Developer/Xcode/DerivedData -path "*/C2PAExampleTests.xctest/C2PAExampleTests" -type f 2>/dev/null | grep -i c2paexample | head -1 || true)
          fi

          echo "Test binary path: $TEST_BINARY_PATH"

          # Try to generate LCOV if we have both files
          if [ -n "$PROFDATA_PATH" ] && [ -n "$TEST_BINARY_PATH" ]; then
            # Export to LCOV format
            # Use a sanitized filename to avoid shell issues with special characters
            DEVICE_NAME="${{ matrix.device }}"
            SANITIZED_DEVICE=$(echo "$DEVICE_NAME" | tr ' ()' '---')

            xcrun llvm-cov export \
              -format=lcov \
              -instr-profile="$PROFDATA_PATH" \
              "$TEST_BINARY_PATH" \
              > "../coverage-${{ matrix.xcode }}-${SANITIZED_DEVICE}.lcov"

            echo "LCOV coverage report generated successfully"
          else
            echo "ERROR: Could not generate LCOV report - missing profdata or binary"
            echo "PROFDATA_PATH: $PROFDATA_PATH"
            echo "TEST_BINARY_PATH: $TEST_BINARY_PATH"
            exit 1
          fi

      - name: Upload coverage report to GitHub
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.xcode }}-${{ matrix.device }}
          path: coverage-*.lcov

      - name: Upload coverage report to Codecov
        if: success()
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: redaranj/c2pa-ios
